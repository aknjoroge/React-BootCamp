{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/quote details/quoteDetail.js"],"names":["module","exports","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useState","comentSent","setcomentSent","useApi","sendRequest","hasError","errorMessage","isLoading","isSuccess","params","useLocation","useParams","submitFormHandler","event","a","preventDefault","current","value","Date","now","quoteID","addAComment","passData","hide","Card","form","onSubmit","control","htmlFor","LoadingSpinner","required","rows","ref","actions","Comments","isAddingComment","setIsAddingComment","isEmpty","setIsEmpty","setComments","useEffect","fetchComments","key","data","apiData","push","componentQuotes","filter","items","prevdata","length","quotesAvailable","noData","onClick","HighlightedQuote","quote","author","QuoteDetails","setquote","fetchQuotes","find","componentRoute","useRouteMatch","dataOkay","path","exact","to","url"],"mappings":"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","file":"static/js/4.c6ea8d5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3-HGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3uO01\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__19pqB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__24KVl\",\"loading\":\"NewCommentForm_loading__2vDAH\",\"control\":\"NewCommentForm_control__1coC3\",\"actions\":\"NewCommentForm_actions__2iDha\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1fAF4\"};","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { Fragment, useRef, useState } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport useApi from \"../../hooks/useApi\";\nimport { addAComment } from \"../library/appFunctions\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  let [comentSent, setcomentSent] = useState({});\n\n  let { sendRequest, hasError, errorMessage, isLoading, isSuccess } = useApi();\n  let location = useLocation();\n\n  let params = useParams();\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n\n    let comment = commentTextRef.current.value;\n    let id = Date.now();\n    let quoteID = params.id;\n\n    setcomentSent(function () {\n      return {\n        id,\n        quoteID,\n        text: comment,\n      };\n    });\n\n    let data = await sendRequest(addAComment(comment, id, quoteID));\n  };\n\n  if (isSuccess) {\n    props.passData(comentSent);\n\n    props.hide();\n  }\n\n  if (hasError) {\n    return (\n      <Fragment>\n        <Card>\n          <div className=\"centered error\">\n            <h4>Error</h4>\n            <p>{errorMessage}</p>\n          </div>\n        </Card>\n      </Fragment>\n    );\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        {isLoading && <LoadingSpinner />}\n        {!isLoading && (\n          <textarea\n            required\n            id=\"comment\"\n            rows=\"5\"\n            ref={commentTextRef}\n          ></textarea>\n        )}\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { Fragment, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport useApi from \"../../hooks/useApi\";\nimport { fetchComments } from \"../library/appFunctions\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./Comments.module.css\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  let params = useParams();\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const CloseCommentForm = () => {\n    setIsAddingComment(false);\n  };\n\n  let [isEmpty, setIsEmpty] = useState(true);\n  let [comments, setComments] = useState([]);\n  let { sendRequest, hasError, errorMessage, isLoading, isSuccess } = useApi();\n\n  useEffect(async function () {\n    let data = await sendRequest(fetchComments());\n    let apiData = [];\n    for (const key in data) {\n      apiData.push({\n        id: data[key].id,\n        quoteID: data[key].quoteID,\n        text: data[key].text,\n      });\n    }\n\n    let componentQuotes = apiData.filter(function (items) {\n      return items.quoteID == params.id;\n    });\n\n    setComments(function (prevdata) {\n      return componentQuotes;\n    });\n    setIsEmpty(!apiData.length > 0);\n  }, []);\n\n  let getNewData = function (data) {\n    setComments(function (prevdata) {\n      let tmpArray = [\n        ...prevdata,\n        {\n          id: data.id,\n          quoteID: data.quoteID,\n          text: data.text,\n        },\n      ];\n\n      return tmpArray;\n    });\n  };\n\n  if (hasError) {\n    return (\n      <Fragment>\n        <Card>\n          <div className=\"centered error\">\n            <h1>Error</h1>\n            <h2>{errorMessage}</h2>\n          </div>\n        </Card>\n      </Fragment>\n    );\n  }\n\n  let quotesAvailable = !isEmpty && !isLoading;\n  let noData = isEmpty && !isLoading;\n\n  return (\n    <section className={classes.comments}>\n      <h2 className=\"mt\">User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn mb\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm hide={CloseCommentForm} passData={getNewData} />\n      )}\n      {isLoading && <LoadingSpinner></LoadingSpinner>}\n      {quotesAvailable && <CommentsList comments={comments} />}\n      {noData && <p>No quote found</p>}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect, useState } from \"react\";\r\nimport { Route, useParams, useRouteMatch } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Comments from \"../../components/comments/Comments\";\r\nimport CommentsList from \"../../components/comments/CommentsList\";\r\nimport { fetchQuotes } from \"../../components/library/appFunctions\";\r\nimport HighlightedQuote from \"../../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner\";\r\nimport useApi from \"../../hooks/useApi\";\r\n\r\nfunction QuoteDetails() {\r\n  let params = useParams();\r\n\r\n  let [quote, setquote] = useState([]);\r\n  let { sendRequest, hasError, errorMessage, isLoading, isSuccess } = useApi();\r\n  useEffect(async function () {\r\n    let data = await sendRequest(fetchQuotes());\r\n    let apiData = [];\r\n    for (const key in data) {\r\n      apiData.push({\r\n        author: data[key].author,\r\n        id: data[key].id,\r\n        text: data[key].text,\r\n      });\r\n    }\r\n\r\n    setquote(function () {\r\n      return apiData.find(function (item) {\r\n        return item.id == params.id;\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  let componentRoute = useRouteMatch();\r\n \r\n\r\n  let dataOkay = !isLoading && !hasError;\r\n  return (\r\n    <Fragment>\r\n      <div className=\"centered m-10\">\r\n        <h2> Quote Details </h2>\r\n\r\n        {isLoading && <LoadingSpinner />}\r\n        {dataOkay && (\r\n          <div>\r\n            <HighlightedQuote author={quote.author} text={quote.text} />\r\n            <Route path={componentRoute.path} exact>\r\n              <Link className=\"btn \" to={`${componentRoute.url}/comment`}>\r\n                View Comment\r\n              </Link>\r\n            </Route>\r\n\r\n            <Route path={`${componentRoute.path}/comment`}>\r\n              <Comments />\r\n              <Link\r\n                className=\"btn-basic block mt border-none\"\r\n                to={`${componentRoute.url}`}\r\n              >\r\n                Hide comment\r\n              </Link>\r\n            </Route>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}